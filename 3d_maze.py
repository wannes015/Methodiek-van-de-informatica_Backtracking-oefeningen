# _____/\\\\\\\\\\___/\\\\\\\\\\\\_______________/\\\\____________/\\\\_____________________________________________
#  ___/\\\///////\\\_\/\\\////////\\\____________\/\\\\\\________/\\\\\\_____________________________________________
#   __\///______/\\\__\/\\\______\//\\\___________\/\\\//\\\____/\\\//\\\_____________________________________________
#    _________/\\\//___\/\\\_______\/\\\___________\/\\\\///\\\/\\\/_\/\\\__/\\\\\\\\\_____/\\\\\\\\\\\_____/\\\\\\\\__
#     ________\////\\\__\/\\\_______\/\\\___________\/\\\__\///\\\/___\/\\\_\////////\\\___\///////\\\/____/\\\/////\\\_
#      ___________\//\\\_\/\\\_______\/\\\___________\/\\\____\///_____\/\\\___/\\\\\\\\\\_______/\\\/_____/\\\\\\\\\\\__
#       __/\\\______/\\\__\/\\\_______/\\\____________\/\\\_____________\/\\\__/\\\/////\\\_____/\\\/______\//\\///////___
#        _\///\\\\\\\\\/___\/\\\\\\\\\\\\/_____________\/\\\_____________\/\\\_\//\\\\\\\\/\\__/\\\\\\\\\\\__\//\\\\\\\\\\_
#         ___\/////////_____\////////////_______________\///______________\///___\////////\//__\///////////____\//////////__

# Oplossing zie : https://github.com/wannes015/mi_examen

# SPELREGELS
##########################
# 1. De speler kan enkel naar aanliggende posities gaan (niet schuin)
# 2. De speler moet binnen de muren van het doolhof blijven (enkel vakjes met 1 zijn toegelaten)
# 3. Het doolhof is altijd eenvoudig kubisch (jaja, juist materiaalkunde gehad gy weet)
# 4. Elke positie mag maar 1 keer bezocht worden

# Doel: bepaal de lengte van het kortst mogelijke pad gegeven de start en eind positie

CONTINUE = "CONTINUE"
ACCEPT = "ACCEPT"
ABANDON = "ABANDON"

def examine(maze, end, par_sol):
    pass

def extend(maze, end, par_sol):
    pass


def solve(maze, end, par_sol = [], depth = 0):
    pass

start = (3, 3, 0)
end = (0, 0, 3)

maze = [
    [
        [0, 0, 1, 1],
        [0, 0, 0, 0],
        [0, 0, 0, 1],
        [0, 0, 0, 0],
    ],
    [
        [0, 1, 1, 0],
        [0, 1, 0, 1],
        [0, 0, 1, 1],
        [0, 0, 1, 0],
    ],
    [
        [1, 0, 1, 0],
        [1, 1, 0, 0],
        [0, 1, 0, 0],
        [0, 1, 1, 0],
    ],
    [
        [0, 0, 1, 1],
        [0, 0, 0, 1],
        [1, 1, 1, 1],
        [1, 0, 0, 0],
    ],
]

assert solve(maze, end, [start]) == 10,  "Incorrecte lengte"